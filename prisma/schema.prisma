// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  password           String?
  role               Role?           @default(USER)
  words              Word[]
  synced_at          DateTime?
  accounts           Account[]
  sessions           Session[]
  Authenticator      Authenticator[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  part_of_speeches   PartOfSpeech[]
  auto_sync          Boolean         @default(false)
  use_when_loggedout Boolean         @default(true)
  blind_mode         Boolean         @default(false)
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Word {
  id             String        @id
  word           String
  phonetics      String?
  part_of_speech PartOfSpeech? @relation(fields: [partOfSpeechId], references: [id])
  definition     String
  example        String?
  notes          String?
  is_learned     Boolean       @default(false)
  created_at     DateTime
  updated_at     DateTime
  learned_at     DateTime?
  synced_at      DateTime?
  retention_rate Int           @default(0)
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  partOfSpeechId String?
  is_deleted     Boolean       @default(false)
}

model PartOfSpeech {
  id             String   @id
  part_of_speech String
  Word           Word[]
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String
  created_at     DateTime
  updated_at     DateTime
  synced_at      DateTime
  is_deleted     Boolean  @default(false)
}
