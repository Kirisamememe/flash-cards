// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String?         @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  password           String?
  role               Role?           @default(USER)
  words              Word[]
  synced_at          DateTime?
  accounts           Account[]
  sessions           Session[]
  Authenticator      Authenticator[]
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  auto_sync          Boolean         @default(false)
  blind_mode         Boolean         @default(false)
  learning_lang      Language?       @default(EN)
  trans_lang         Language?
  mastered_words     MasteredWord[]
  materials         Material[]
}

enum Role {
  ADMIN
  USER
}

enum Language {
  EN
  JA
  ZH_CN
  ZH_TW
  KO
  VI
  FR
  ES
  PT
  DE
  RU
  IT
}

enum POS {
  NOUN
  VERB
  TRANSITIVE_VERB
  INTRANSITIVE_VERB
  ADJECTIVE
  ADVERB
  PREPOSITION
  CONJUNCTION
  PRONOUN
  INTERJECTION
  PHRASE
  DETERMINER
  SENTENCE
  IDIOM
  ORDINAL
  OTHER
  UNDEFINED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Word {
  id             String        @id
  word           String
  phonetics      String?
  pos            POS           @default(UNDEFINED)
  definition     String
  example        String?
  notes          String?
  created_at     DateTime
  updated_at     DateTime
  learned_at     DateTime?
  synced_at      DateTime?
  retention_rate Int           @default(0)
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  is_deleted     Boolean       @default(false)
  records        Record[]
}

model Record {
  id          String   @id
  word        Word     @relation(fields: [word_id], references: [id])
  word_id     String
  is_correct  Boolean
  reviewed_at DateTime
  time        Float
  synced_at   DateTime
}

model MasteredWord {
  user_id        String   @id
  user           User     @relation(fields: [user_id], references: [id])
  word           String
  updated_at     DateTime
  synced_at      DateTime
}

model Material {
  id             String   @id
  title          String
  content        String
  trans_lang     Language?
  translation   String?
  created_at     DateTime
  updated_at     DateTime
  synced_at      DateTime @default(now())
  bookmarked_at  DateTime?
  deleted_at     DateTime?
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String
  generated_by   String?
}